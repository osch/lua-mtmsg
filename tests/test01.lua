local mtmsg     = require("mtmsg")
local startTime = mtmsg.time()

print(mtmsg.newbuffer("xx"))
print(mtmsg.newbuffer())
print(mtmsg.newbuffer())
print(mtmsg.newbuffer())
local q=mtmsg.buffer("xx")
print(q)
collectgarbage();
print("----------------")
q = nil
collectgarbage();
print("----------------")
print(mtmsg.newbuffer())
print(mtmsg.newbuffer())
print(mtmsg.newbuffer())
--collectgarbage();
print("----------------")


do
    local ok, err = pcall(function() mtmsg.buffer("hugo") end)
    assert(not ok)
    print("------ expected error")
    print(err)
    print("---------------------")
    assert(mtmsg.error.unknown_object == err)
    assert(not (mtmsg.error.unknown_object ~= err))
    assert(mtmsg.error.operation_aborted ~= err)
    assert(mtmsg.error.operation_aborted ~= nil)
end
do
    local b = mtmsg.newbuffer("hugo")
    local ok, err = pcall(function() mtmsg.newbuffer("hugo") end)
    assert(err == mtmsg.error.object_exists)
    b:addmsg("m1")
    b:close()
    local ok, err = pcall(function() b:addmsg("m2") end)
    print("------ expected error")
    print(err)
    print("---------------------")
    assert(err == mtmsg.error.object_closed)
end
collectgarbage()
do
    local b = mtmsg.newbuffer("hugo", 4, 6, 0)
    b:addmsg("1")
    local ok, err = pcall(function() b:addmsg("m2") end)
    print("------ expected error")
    print(err)
    print("---------------------")
    assert(err == mtmsg.error.message_size)
end
do
    local l = mtmsg.newlistener()
    local b = l:newbuffer()
    l:nextmsg(0)
    b = nil
    collectgarbage()
    local ok, err = pcall(function() l:nextmsg(0) end)
    print("------ expected error")
    print(err)
    print("---------------------")
    assert(err == mtmsg.error.no_buffers)
end
local q = mtmsg.newbuffer("test01", 18, 18, 1.9)
local q1 = mtmsg.newbuffer(18, 18, 1.9)
local q2 = mtmsg.newbuffer("x\\x\0y\"aa", 18, 18, 1.9)
local q3 = mtmsg.buffer("test01")
local q4 = mtmsg.buffer(q:id())
print(q)
print(q3)
print(q4)
print("---------------------")
print(q1:isnonblock())
assert(not q1:isnonblock())
q1:nonblock(true)
assert(q1:isnonblock())
print(q1:isnonblock())
print("---------------------")
print(q)
print(q:id(), q:name())
print(q1)
print(q1:id(), q1:name())
print(q2)
print(q2:id(), q2:name(), #q2:name())
print("---------------------")
print(q:addmsg("first-----", true, 12, 100.5) and "added" or "not added")
print(q:addmsg("second") and "added" or "not added")
--print(q:setmsg("third", "third2") and "added" or "not added")
--print(q:clear() and "cleared" or "not cleared")
print("XXXXXXXXXX", q:nextmsg(1))
local m = q:nextmsg(1)
print(m)


print("---------------------")
q:addmsg("x", q:name(), q:id())
print("huhu")
print(q:nextmsg())
print(" --------------------------------- Time:", mtmsg.time() - startTime)

local startTime = os.time()
--print(q:nextmsg() or "...")
print(q:nextmsg(0.4) or "...")
print(q:nextmsg(1.2) or "...")
print(q:nextmsg(0.4) or "...")
local endTime = os.time()
print("Time (2 expected):", endTime - startTime)
assert(endTime - startTime == 2)

print("---------------------")
l1 = mtmsg.newlistener()
l2 = mtmsg.newlistener("LL2")
print(l1, l2)
print(mtmsg.listener(l1:id()), mtmsg.listener(l2:name()))
print(l1:id(), l2:id())
print(l1:name(), l2:name())
q  = l1:newbuffer()
q1 = l1:newbuffer()
q:addmsg("listenermsg1", 1)
q:addmsg("listenermsg3", 3)
q1:addmsg("listenermsg2", 2)
print("---------------------x")
print(l1:nextmsg(10))
print(l1:nextmsg(10))
print(l1:nextmsg())
print("---------------------")
local startTime = mtmsg.time()
print(l1:nextmsg(1))
local endTime = mtmsg.time()
print("Time (1 expected):", endTime - startTime)
assert(math.abs(endTime - startTime - 1) < 0.1)
print("---------------------")
q:close()
q1:close()
--l1:nextmsg()

