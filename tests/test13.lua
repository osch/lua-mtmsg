local mtmsg  = require("mtmsg")
local carray = require("carray")

local function PRINT(s)
    print(s.." ("..debug.getinfo(2).currentline..")")
end
local function msgh(err)
    return debug.traceback(err, 2)
end
local function pcall(f, ...)
    return xpcall(f, msgh, ...)
end

local function assertArrayEqual(a1, a2)
    assert(a1:len() == a2:len())
    for i = 1, a1:len() do
        assert(a1:get(i), a2:get(i))
    end
end

PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1)
    local a2 = b:nextmsg()
    assert(a1 ~= a2)
    assertArrayEqual(a1, a2)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1)
    local a2 = b:nextmsg(nil, a1)
    assert(a1 == a2)
    assertArrayEqual(a1, a2)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1)
    local a2 = b:nextmsg(a1)
    assert(a1 == a2)
    assertArrayEqual(a1, a2)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    local ok, err = pcall(function() b:nextmsg("1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#1 to 'nextmsg' %(timeout seconds or carray expected%)"))
    b:addmsg("")
    assert(a1:len() == 3)
    b:nextmsg(nil, a1)
    assert(a1:len() == 0)
end
PRINT("==================================================================================")
do
    local l = mtmsg.newlistener()
    local b = l:newbuffer()
    local a1 = carray.new("int", 3)
    local ok, err = pcall(function() l:nextmsg("1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#1 to 'nextmsg' %(timeout seconds or carray expected%)"))
    b:addmsg("")
    assert(a1:len() == 3)
    l:nextmsg(nil, a1)
    assert(a1:len() == 0)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    b:addmsg(carray.new("int", 3))
    local ok, err = pcall(function() b:nextmsg(a1, "xx") end)
    --print(err)
    assert(not ok and err:match("bad argument %#2 to 'nextmsg' %(carray expected%)"))
    b:addmsg("")
    assert(a1:len() == 3)
    b:nextmsg(nil, a1)
    assert(a1:len() == 3)
    b:nextmsg(nil, a1)
    assert(a1:len() == 0)
end
PRINT("==================================================================================")
do
    local l = mtmsg.newlistener()
    local b = l:newbuffer()
    local a1 = carray.new("int", 3)
    b:addmsg(carray.new("int", 3))
    local ok, err = pcall(function() l:nextmsg(a1, "xx") end)
    --print(err)
    assert(not ok and err:match("bad argument %#2 to 'nextmsg' %(carray expected%)"))
    b:addmsg("")
    assert(a1:len() == 3)
    l:nextmsg(nil, a1)
    assert(a1:len() == 3)
    l:nextmsg(nil, a1)
    assert(a1:len() == 0)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local r = mtmsg.newreader()
    local ok, err = pcall(function() r:nextmsg(b, "1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#2 to 'nextmsg' %(timeout seconds expected%)"))
end
PRINT("==================================================================================")
do
    local l = mtmsg.newlistener()
    local b = l:newbuffer()
    local r = mtmsg.newreader()
    local ok, err = pcall(function() r:nextmsg(l, "1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#2 to 'nextmsg' %(timeout seconds expected%)"))
end
PRINT("==================================================================================")
do
    local r = mtmsg.newreader()
    local b = mtmsg.newbuffer()
    local ok, err = pcall(function() r:next("1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#1 to 'next' %(integer or carray expected%)"))
    local ok, err = pcall(function() r:next(1, "1") end)
    --print(err)
    assert(not ok and err:match("bad argument %#2 to 'next' %(carray expected%)"))
    assert(nil == r:next(carray.new("int")))
    local a1 = carray.new("int", 3)
    b:addmsg(a1)
    a1:setlen(10)
    assert(a1:len() == 10)
    r:nextmsg(b)
    local a2 = r:next(a1)
    assert(a1 == a2)
    assert(a1:len() == 3)
    b:addmsg(carray.new("char", 30))
    r:nextmsg(b)
    assert(a1:len() == 3)
    local a2 = r:next(a1)
    assert(a2 ~= a1)
    assert(a1:len() == 0)
    assert(a2:len() == 30)
    assert(a2:type() == "unsigned char")
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1)
    local a2 = b:nextmsg(0, a1)
    assert(a1 == a2)
    assertArrayEqual(a1, a2)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    local a2 = carray.new("int", 4)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1)
    local a3 = b:nextmsg(0, a1, a2, nil)
    assert(a3 == a1)
    assert(a2:len() == 0)
    assert(a3:len() == 3)
    assert(a1:get(1) == 101)
    assert(a1:get(2) == 102)
    assert(a1:get(3) == 103)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    local a2 = carray.new("int", 4)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1, a1)
    a1:set(1, 9, 9, 9)
    local a3, a4 = b:nextmsg(0, a1, a2, nil)
    assert(a3 == a1)
    assert(a4 == a2)
    assert(a1 ~= a2)
    assert(a1:len() == 3)
    assert(a2:len() == 3)
    assert(a1:get(1) == 101)
    assert(a1:get(2) == 102)
    assert(a1:get(3) == 103)
    assertArrayEqual(a1, a2)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local a1 = carray.new("int", 3)
    local a2 = carray.new("char", 4)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1, a1)
    a1:set(1, 9, 9, 9)
    local a3, a4 = b:nextmsg(0, a2, a1, nil)
    assert(a3 == a1)
    assert(a2:len() == 0)
    assert(a4 ~= a2)
    assert(a1 ~= a2)
    assert(a3:len() == 3)
    assert(a4:len() == 3)
    assert(a3:get(1) == 101)
    assert(a3:get(2) == 102)
    assert(a3:get(3) == 103)
    assertArrayEqual(a3, a4)
end
PRINT("==================================================================================")
do
    local b = mtmsg.newbuffer()
    local r = mtmsg.newreader()
    local a1 = carray.new("int", 3)
    local a2 = carray.new("char", 4)
    a1:set(1, 101, 102, 103)
    b:addmsg(a1, a1)
    a1:set(1, 9, 9, 9)
    r:nextmsg(b)
    local a3, a4 = r:next(2, a2, a1)
    assert(a3 == a1)
    assert(a2:len() == 0)
    assert(a4 ~= a2)
    assert(a1 ~= a2)
    assert(a3:len() == 3)
    assert(a4:len() == 3)
    assert(a3:get(1) == 101)
    assert(a3:get(2) == 102)
    assert(a3:get(3) == 103)
    assertArrayEqual(a3, a4)
end
PRINT("==================================================================================")
print("OK.")
